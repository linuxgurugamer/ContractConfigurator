//
// Contains tests related to the expression functionality.
//

CONTRACT_GROUP
{
    name = Expression

    DATA
    {
        type = string

        groupString = The group string
    }

    DATA
    {
        type = CelestialBody

        groupBody = AllBodies().Random()
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExpressionBehaviour
    group = Expression

    // Contract text
    title = EXP - Behaviour
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    // Test out the Random(int) function
    maxCompletions = AllBodies().Random(3).Count()

    targetBody = [Kerbin].Concat([Mun]).Add(Minmus).Random()

    DATA
    {
        type = CelestialBody
        requiredValue = false
        someBody = OrbitedBodies().Random()
        groupBodyReference = @Expression:groupBody
    }

    // This tests a big expression crash issue
    DATA
    {
        type = CelestialBody
        targetPlanet = HomeWorld() == Sun ? HomeWorld(): Mun
    }

    DATA
    {
        type = string
        nospace =  "RandomKerbalName(Male) and RandomKerbalName(Female) something something (spoilers)"
        space = " RandomKerbalName(Male) and RandomKerbalName(Female) something something (spoilers)"
        qtest = "quoted " + "test"

        firstName = @/k1.FirstName()
        lastName = @/k2.LastName()
        fullName = @/k2
        fullName2 = "The Kerbal is @/k2"
    }

    DATA
    {
        type = Kerbal

        k1 = Valentina Kerman
        k2 = NewKerbal()
    }

    DATA
    {
        type = AvailablePart
        thePart = [ fuelTankSmallFlat , liquidEngine ].Random()
    }

    DATA
    {
        type = double

        round1 = Round(113.34)
        round2 = Round(113.34, 1.0)
        round3 = Round(113.34, 5.0)
        round4 = Round(113.34, 10.0)
    }

    DATA
    {
        type = float

        playerRep = Reputation()
    }

    DATA
    {
        type = Duration

        unrounded = Random(2d, 10d)
        precision = 1d
    }

    DATA
    {
        type = double

        roundedDouble = Round(@unrounded, @precision)
    }

    DATA
    {
        type = Duration

        rounded = @roundedDouble
    }

    // Contract rewards
    rewardScience = 100.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = 5000

        targetBody = @Expression:groupBody

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }

    BEHAVIOUR
    {
        name = Expression1
        type = Expression

        CONTRACT_OFFERED
        {
            type = CelestialBody
            theBody = Duna
        }

        CONTRACT_ACCEPTED
        {
            CC_TestVal = 10 * 2 - 3 * 4
        }

        CONTRACT_COMPLETED_SUCCESS
        {
            CC_TestVal = CC_TestVal * 2
            CC_EXPTEST_Success = 1
        }

        CONTRACT_COMPLETED_FAILURE
        {
            CC_TestVal = CC_TestVal / 2
            CC_EXPTEST_Success = 0
        }

        PARAMETER_COMPLETED
        {
            parameter = ReachState

            CC_ParamThing = 10
        }
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExpressionRequirement
    group = Expression

    // Contract text
    title = EXP - Requirement
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    // Target Celestial body - controls where the contract must be completed, has some automated
    // effects on numeric parameters (increasing science, etc.)
    targetBody = Kerbin

    // Contract rewards
    rewardScience = 100.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = 5000

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }

    REQUIREMENT
    {
        name = Expression1
        type = Expression

        expression = CC_EXPTEST_Success == 1 || CC_TestVal != 0
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = 10 == 50 || 100 > 2
    }

    REQUIREMENT
    {
        name = Expression
        type = Expression

        expression = 10 == 50 && 100 > 2 || 10 < 20
    }
}


CONTRACT_TYPE
{
    name = ExpressionInLine
    group = Expression

    // Contract text
    title = EXP - In Line
    description = The title of this contract is @title, and the target is @targetBody.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = [HomeWorld(), Mun, Minmus].Random()

    // Contract rewards
    rewardFunds = Random(100.0, 1000.0)
    rewardScience = @targetBody == Kerbin ? 10.0 : 5.0
    rewardReputation = @targetBody.IsHomeWorld() ? 10.0 : 5.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = @minAltitude * 10
    }

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = @maxAltitude / 10
        maxAltitude = 5000
    }

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = @/targetBody.Radius()
        maxAltitude = @/targetBody.Radius() + @/targetBody.Parent().Radius()
    }

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }
}


CONTRACT_TYPE
{
    name = ExpressionList
    group = Expression

    // Contract text
    title = EXP - List
    description = The title of this contract is @title, and the target is @targetBody.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = [HomeWorld(), Mun, Minmus].Where(x => x.IsMoon()).Random()

    // Contract rewards
    rewardFunds = 10.0
    rewardScience = 10.0
    rewardReputation = 10.0

    PARAMETER
    {
        name = KerbalDeaths1 
        type = KerbalDeaths
    }
}


CONTRACT_TYPE
{
    name = ExpressionErrorHandling
    group = Expression

    // Contract text
    title = EXP - Error Handling
    description = A more detailed description of the contract.  This is where you come in.
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = Kerbin

    // Contract rewards
    rewardFunds = 1000.0

    // Circular reference
    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = @maxAltitude / 10
        maxAltitude = @minAltitude * 10
    }
}


CONTRACT_TYPE
{
    name = ExpressionTypes
    group = Expression

    // Contract text
    title = EXP - Types
    description = Part is @targetPart (@targetPart.Description()).
    synopsis = We want you to do a thing.
    completedMessage = You have done the thing.

    maxSimultaneous = 1

    targetBody = Kerbin

    // Contract rewards
    rewardFunds = 1000.0

    DATA
    {
        type = bool
        someBoolean = @/targetBody != null
    }

    DATA
    {
        type = AvailablePart
        targetPart = Mark1-2Pod
    }

    DATA
    {
        type = string
        string1 = This is a string
        string2 = "This is a quoted string"
        slist0 = @/slist.ElementAt(0)
        slist1 = @/slist.ElementAt(1)
        slist2 = @/slist.ElementAt(2)
    }

    DATA
    {
        type = List<string>

        slist = [ "Item1", @string1, "Item3" ]
    }

    // Circular reference
    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 100
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExpressionPDS
    group = Expression

    DATA
    {
        type = string

        descStr = #cc.list.and.2
        descStr1 = The first string
        descStr2 = the second string
    }

    // Contract text
    title = EXP - Data Store
    description = Format(@descStr, [@descStr1, @descStr2])
    synopsis = Format("#cc.list.and.2", [@descStr1, @descStr2])
    completedMessage = Format("#cc.list.and.2", ["The first string", "the second string"])

    maxSimultaneous = 1

    // Test out the Random(int) function
    maxCompletions = AllBodies().Random(3).Count()

    targetBody = [Kerbin].Concat([Mun]).Add(Minmus).Random()

    DATA
    {
        type = CelestialBody
        someBody = $theBody
    }

    // Contract rewards
    rewardScience = 100.0

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = 5000

        targetBody = @Expression:groupBody

        // Text to use for the parameter
        // Default = <kerbal>: Recovered
        //title = 
    }
}

CONTRACT_TYPE
{
    // Unique name of the contract (required)
    name = ExpressionScience
    group = Expression

    DATA
    {
        type = List<ScienceSubject>

        kerbinSci = AllScienceSubjectsByBody([Kerbin])
        kerbinShoresSci = AllScienceSubjectsByBiome([Shores])
        kerbinGrassSci = AllScienceSubjectsByBiome([Grasslands])
    }

    // Contract text
    title = EXP - Science
    description = description
    synopsis = synopsis
    completedMessage = completedMessage

    maxSimultaneous = 1
    targetBody = Kerbin

    PARAMETER
    {
        name = ReachState
        type = ReachState

        minAltitude = 500
        maxAltitude = 5000
    }
}
